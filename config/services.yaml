# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    images_directory: '%kernel.project_dir%/public/uploads'
    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: ar|en|fr|de|es|cs|nl|ru|uk|ro|pt_BR|pl|it|ja|id|ca|sl|hr|zh_CN|bg|tr|lt|bs|sr_Cyrl|sr_Latn
    app.notifications.email_sender: anonymous@example.com
    admin_email: 'admin@gmail.fr'
#    maintenanceFilePath: '%kernel.project_dir%/public/.maintenance'
    envTest: 1
    link_site: 'http://daos-cnt.com'
    link_site_short: daos-cnt.com
    link_landing: 'http://daos-cnt.com/lien'
    mail_contact: 'dao.cnt@outlook.fr'
    tel_contact: '0646076660'
    name_repo: Daos
    name_site: daos-cnt.com
    societe: 'DAOS'
    societe_street: '3 route de Mandres'
    societe_city: 'Brie Comte Robert'
    societe_cp: '77170'
    societe_country: 'France'
    siren: ''
    facebook: ''
    github: ''
    linkedin: ''
    nameSiteConfig: daos_
    session_max_idle_time: 450

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            string $locales: '%app_locales%'
            string $defaultLocale: '%locale%'
            string $emailSender: '%app.notifications.email_sender%'
#            $adminEmail: '%admin_email%
#    Ecouteur d'event
#    App\EventListener\BarListener:
#        tags:
#            - { name: kernel.event_listener, event: foo, method: doSomething }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    monolog.dbHandler:
        class: App\Utils\DbHandler

    monolog.dbProcessor:
        class: App\Utils\dbProcessor
        tags:
            - {name: monolog.processor, handler: dbHandler}

    app.handler.session_idle:
        class: App\Handler\SessionIdleHandler
        arguments: ["@session", "@security.token_storage", "@router", "%session_max_idle_time%"]
        tags:
          - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    # when the service definition only contains arguments, you can omit the
    # 'arguments' key and define the arguments just bel ow the service class
    App\EventSubscriber\CommentNotificationSubscriber:
        $sender: '%app.notifications.email_sender%'

when@test:
    services:
        test.user_password_hasher:
            alias: 'security.user_password_hasher'
            public: true
