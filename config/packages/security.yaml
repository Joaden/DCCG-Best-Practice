security:
    # a new authentication system is available since Symfony 5.1 to make
    # Symfony security more extensible and easier to understand
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true

    password_hashers:
        # Our user class and the algorithm we'll use to encode passwords
        # 'auto' means to let Symfony choose the best possible password hasher (Argon2 or Bcrypt)
        # https://symfony.com/doc/current/security.html#c-encoding-passwords
        App\Entity\User: 'auto'

    providers:
        # https://symfony.com/doc/current/security/user_provider.html
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/user_provider.html#creating-a-custom-user-provider
        database_users:
            entity: { class: App\Entity\User, property: email }

    # https://symfony.com/doc/current/security.html#a-authentication-firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false


        main:
            # this firewall applies to all URLs
            pattern: ^/

            lazy: true

            # The user provider to use.
            provider: database_users

            # This allows the user to login by submitting a username and password
            # Reference: https://symfony.com/doc/current/security/form_login_setup.html
            form_login:
                # The route name that the login form submits to
                check_path: security_login
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security_login
                # Secure the login form against CSRF
                # Reference: https://symfony.com/doc/current/security/csrf.html
                enable_csrf: true
                # The page users are redirect to when there is no previous page stored in the
                # session (for example when the users access directly to the login page).
                default_target_path: blog_index

        #    your_firewall_name:
        #        two_factor:
        #            auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
        #            check_path: 2fa_login_check  # The route name you have used in the routes.yaml

            logout:
                # The route name the user can go to in order to logout
                path: security_logout
                # The name of the route to redirect to after logging out
                target: homepage
#            guard:
#                authenticators:
#                    - App\Security\TokenAuthenticator

            # needed because in tests we redefine the 'main' firewall to use
            # HTTP Basic instead of the login form, so this firewall has
            # multiple authenticators
            # See https://symfony.com/doc/current/security/experimental_authenticators.html#configuring-the-authentication-entry-point
            entry_point: 'form_login'

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        - { path: '^/(%app_locales%)/admin', roles: ROLE_ADMIN }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/auth, roles: ROLE_MODERATOR }
        - { path: ^/moderator, roles: ROLE_MODERATOR }
        - { path: ^/user, roles: ROLE_USER }
        - { path: ^/profil, roles: ROLE_USER }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }

    role_hierarchy:
        ROLE_EDITOR: ROLE_USER
        ROLE_AFFILIE: ROLE_USER
        ROLE_MODERATOR: [ROLE_EDITOR, ROLE_AFFILIER]
        ROLE_ADMIN: ROLE_MODERATOR
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]


when@test:
    # this configuration simplifies testing URLs protected by the security mechanism
    # See https://symfony.com/doc/current/testing/http_authentication.html
    security:
        firewalls:
            main:
                http_basic: ~
